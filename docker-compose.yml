# definizione della rete bridge
networks:
  app_network:
    driver: bridge

# definizione dei volumi per persistere i dati
volumes:
  pihole_data:
  nginx_proxy_manager_data:
  nginx_proxy_manager_certs:
  immich_upload_data:
  immich_db_data:
  immich_model_cache:

# definizione dei servizi
services:

  ## pihole
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    ports:
      # dns
      - "53:53/tcp"
      - "53:53/udp"
      # web interface
      - "8080:80/tcp"
    environment:
      TZ: 'Europe/Rome'
      FTLCONF_webserver_api_password: ${FTLCONF_webserver_api_password}
      FTLCONF_dns_listeningMode: 'all'
    networks:
      - app_network
    volumes:
      - 'pihole_data:/etc/pihole'

  ## nginx-proxy-manager
  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # reverse proxy
      - "80:80"
      - "443:443"
      # web interface
      - "8081:81"
    networks:
      - app_network
    volumes:
      - nginx_proxy_manager_data:/data
      - nginx_proxy_manager_certs:/etc/letsencrypt

  ## immich
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    restart: always
    ports:
      - "8082:2283"
    depends_on:
      - immich-redis
      - immich-database
    healthcheck:
      disable: false
    environment:
      REDIS_HOSTNAME: immich-redis
      DB_HOSTNAME: immich-database
    networks:
      - app_network
    volumes:
      - immich_upload_data:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    restart: always
    healthcheck:
      disable: false
    networks:
      - app_network
    volumes:
      - immich_model_cache:/cache

  immich-redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:148bb5411c184abd288d9aaed139c98123eeb8824c5d3fce03cf721db58066d8
    restart: always
    healthcheck:
      test: redis-cli ping || exit 1
    networks:
      - app_network

  immich-database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    restart: always
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;
        Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align
        --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
        echo "checksum failure count is $$Chksum";
        [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
    networks:
      - app_network
    volumes:
      - immich_db_data:/var/lib/postgresql/data